#ifndef `TEST'
  #message Use -D TEST=XXX
  #terminate
#else
  #include `NAME_' # `TEST'
#endif
.end

*--#[ SparseTable1 :
#ifndef `TableSize'
  #define TableSize "10"
#endif
* Bugs reported 2004-04-06 by Misha Tentukov
* PrintTable and FillExpression did not work with non-sparse tables
* Fixed 2005-09-27
cf f;
s x;
ctable Tab(1:`TableSize');
ctable TabNew(1:`TableSize');

#do i=1,`TableSize',1
Fill Tab(`i')=f(`i');
.sort
#enddo

* BUG1 (not all elements are printed):
PrintTable Tab;

bracket x;
.sort
L expr1=table_(Tab,x);
print;
.sort

bracket x;
.sort

* BUG 2 ( seems only TabNew(1) is ok - further everything is broken):
Fillexpression TabNew=expr1(x);
.sort

#do i=1,`TableSize'
L e`i'=TabNew(`i');
#enddo
print;
.sort
.end
	assert succeeded?
	assert result("expr1") =~ expr("f(1)*x + f(2)*x^2 + f(3)*x^3 + f(4)*x^4 + f(5)*x^5 + f(6)*x^6 + f(7)*x^7 + f(8)*x^8 + f(9)*x^9 + f(10)*x^10")
	assert result("e10") =~ expr("f(10)")
*--#] SparseTable1 :
*--#[ SymNonZero :
* Bug reported 2005-09-27 by Aneesh Manohar
* Symmetrize did not make expression y equal to zero
* Fixed 2005-10-09
cfunctions      f,g;
symbols         a,b;
local x=f(a,b)-f(b,a);
local y=f(g(a),b)-f(b,g(a));
symmetrize f;
.sort
print;
.end
	assert succeeded?
	assert result("x") =~ expr("0")
	assert result("y") =~ expr("0")
*--#] SymNonZero :
*--#[ NegDimension :
* Parser accepted negative numbers as arguments to Dimension, Tracen, ...
* Fixed 2009-09-08
Dimension -1;
I i;
L f = d_(i,i);
print;
.end
assert compile_error?
*--#] NegDimension :
*--#[ Forum3t187 :
* bug in argument environment? [function specified by a set]
CF f1,f2,f3;
Set ff1: f1;
Set ff2: f2;
Set ff3: f3;
L F = f1(1) + f2(2) + f3(3);
argument ff2;
  discard;
endargument;
P;
.end
assert succeeded?
assert result("F") =~ expr("f1(1)+f2(0)+f3(3)")
*--#] Forum3t187 :
*--#[ Issue8 :
* Bug with function replacement
Symbols a, b;
Functions fun, nDUMMY1, nDUMMY2;
Local expr= fun(a)*fun(b) ;
Id nDUMMY1?(?args1) * nDUMMY2?(?args2) = 1;
.sort
Print;
.end
assert succeeded?
assert result("expr") =~ expr("1")
*--#] Issue8 :
*--#[ Issue21 :
* Occurs() with two or more terms in function arguments may get freeze
S x;
CF f;
L F = f(1+x);
if (occurs(x));
  id f(?a) = 1;
endif;
P;
.end
assert succeeded?
assert result("F") =~ expr("1")
*--#] Issue21 :
*--#[ Issue25 :
* [tform] ZERO_ is always 1 when InParallel mode
L F1 = 1;
ModuleOption inparallel;
.sort
#message ZERO_F1 = `ZERO_F1'
#message ZERO_ = `ZERO_'
.end
assert succeeded?
assert stdout =~ /~~~ZERO_F1 = 0/
assert stdout =~ /~~~ZERO_ = 0/
*--#] Issue25 :
*--#[ Issue30_1 :
* Substitutions just after putinside/antiputinside may fail
S x;
CF f;
L F1 = 1+x+x^2;
L F2 =-1-x-x^2;
putinside f, x;
*argument; endargument;  * <-- (1)
id f( 1)   = 0;
id f(-1)   = 0;
id f( x)   = 0;
id f(-x)   = 0;
id f( x^2) = 0;
id f(-x^2) = 0;
P;
.end
assert succeeded?
assert result("F1") =~ expr("0")
assert result("F2") =~ expr("0")
*--#] Issue30_1 :
*--#[ Issue30_2 :
S x;
CF f;
L F1 = 1+x+x^2;
L F2 =-1-x-x^2;
antiputinside f, x;
*argument; endargument;  * <-- (1)
id f( 1) = 0;
id f(-1) = 0;
P;
.end
assert succeeded?
assert result("F1") =~ expr("0")
assert result("F2") =~ expr("0")
*--#] Issue30_2 :
*--#[ Issue30_3:
CF f;
S x;
L F = 1;
$a = f;
inside $a;
  putinside f,x;
endinside;
*inside $a; endinside;  * <-- (1) workaround
P " a=%$;", $a;
$a = f($a);
P " a=%$;", $a;
.end
assert succeeded?
assert result("a", 0) =~ expr("f*f(1)")
assert result("a", 1) =~ expr("f(f*f(1))")
*--#] Issue30_3 :
*--#[ Issue37_1 :
* Polyratfun infinite loop in Print statement
S ep;
CF rat;
PolyRatFun rat(expand,ep,6);
L F  = rat(ep,ep);
Print;
.end
assert succeeded?
assert result("F") =~ expr("rat(1)")
*--#] Issue37_1 :
*--#[ Issue37_2 :
S ep;
CF rat;
PolyRatFun rat(expand,ep,6);
L F = rat(1,1)*rat(ep,ep);
Print;
.end
assert succeeded?
assert result("F") =~ expr("rat(1)")
*--#] Issue37_2 :
*--#[ Issue38 :
* Wrong normalization of PolyRatFun
CF num,rat;
PolyRatFun rat;
S n1,x,ep;
L F1 = num(n1)*num(1/2);
L F2 = num(n1)*num(-1/2);
L F3 = rat(1,1) - rat(1,1);
L F4 = rat(x,1)*rat(1+ep,1);
id num(x?) = rat(x,1);
P;
.end
assert succeeded?
assert result("F1") =~ expr("rat(n1,2)")
assert result("F2") =~ expr("rat( - n1,2)")
assert result("F3") =~ expr("0")
assert result("F4") =~ expr("rat(x*ep + x,1)")
*--#] Issue38 :
*--#[ Issue39 :
* Freeze when PolyRatFun contains dot products
V a;
CF rat;
PolyRatFun rat;
L F = rat(a.a,1);
P;
.end
# Runtime errors may freeze ParFORM.
#require not mpi?
assert runtime_error?
*--#] Issue39 :
*--#[ Issue41 :
* replace_ in #assign
S n;
#$x = n * replace_(n,n+1);
L F = `$x';
P;
.end
assert succeeded?
assert result("F") =~ expr("1+n")
*--#] Issue41 :
*--#[ Issue42_1 :
* Factorize/FactDollar are much slower than FactArg
CF num;
S ep,n1,...,n14;
L F =
      +(n1)^5*(n2)^2*(n5)^4*(n6)^4*(n7)^7*(n8)^10*(n9)^21*(-8589934592)
      *(-1+n5)^2*(1+n9)*(30-19*n9+2*n9^2-18*n8+2*n8*n9-64*n7+14*n7*n9+
      16*n7*n8+12*n7^2-22*n6+4*n6*n9+4*n6*n8+8*n6*n7+4*n6^2+12*n5-2*n5*
      n9+4*n5*n8-4*n5*n6-4*n5^2+20*n4-6*n4*n9+4*n4*n8-4*n4*n7-8*n4*n6+4
      *n4^2-2*n3*n9+4*n3*n7+4*n3*n5-4*n3*n4-32*n2+8*n2*n9+2*n2*n8+22*n2
      *n7+8*n2*n6-2*n2*n5-4*n2*n4+6*n2^2+6*n1+7*n1*n9+6*n1*n7+10*n1*n6-
      6*n1*n5-12*n1*n4+4*n1*n2-2*n1^2-16*ep+8*ep*n9+8*ep*n8+32*ep*n7+8*
      ep*n6-16*ep*n5-16*ep*n4+16*ep*n2)
;
.sort

* FactArg

L F1 = num(F);
factarg num;
chainout num;
.sort

* #FactDollar
* FIXME: ParFORM hangs. (#46)
#$F2 = F;
#factdollar $F2
L F2 =
  num(`$F2[1]')
  #do i=2,`$F2[0]'
    * num(`$F2[`i']')
  #enddo
;
.sort

* FactDollar

L F3 = 1;
inexpression F3;
  $F3 = F;
  factdollar $F3;
  do $i=1,$F3[0];
    multiply num($F3[$i]);
  enddo;
endinexpression;

.sort

* FIXME: Factorize still have the performance issue. (#44)
#if 0
L F4 = F;
Factorize F4;
.sort
#endif

P;
.end
#require not mpi?
assert succeeded?
f = expr("""
      num(n1)^5*num(n2)^2*num(n5)^4*num(n6)^4*num(n7)^7*num(n8)^10*num(n9)^21*
      num( - 8589934592)*num( - 1 + n5)^2*num(1 + n9)*num(30 - 19*n9 + 2*n9^2
       - 18*n8 + 2*n8*n9 - 64*n7 + 14*n7*n9 + 16*n7*n8 + 12*n7^2 - 22*n6 + 4*
      n6*n9 + 4*n6*n8 + 8*n6*n7 + 4*n6^2 + 12*n5 - 2*n5*n9 + 4*n5*n8 - 4*n5*n6
       - 4*n5^2 + 20*n4 - 6*n4*n9 + 4*n4*n8 - 4*n4*n7 - 8*n4*n6 + 4*n4^2 - 2*
      n3*n9 + 4*n3*n7 + 4*n3*n5 - 4*n3*n4 - 32*n2 + 8*n2*n9 + 2*n2*n8 + 22*n2*
      n7 + 8*n2*n6 - 2*n2*n5 - 4*n2*n4 + 6*n2^2 + 6*n1 + 7*n1*n9 + 6*n1*n7 +
      10*n1*n6 - 6*n1*n5 - 12*n1*n4 + 4*n1*n2 - 2*n1^2 - 16*ep + 8*ep*n9 + 8*
      ep*n8 + 32*ep*n7 + 8*ep*n6 - 16*ep*n5 - 16*ep*n4 + 16*ep*n2)
""")
assert result("F1") =~ f
assert result("F2") =~ f
assert result("F3") =~ f
*--#] Issue42_1 :
*--#[ Issue42_2 :
S x;
L F = gcd_(
  (1+x),
  2*(1+x),
  3*(1+x)
);
P;
.end
assert succeeded?
assert result("F") =~ expr("1+x")
*--#] Issue42_2 :
*--#[ Issue42_3 :
S n1,...,n4;
L F1 = (1+n1)*(1+n2)*n1*n2*n3;
L F2 = (1+n2)*n1*n2*n3*n4;
L F3 = (1+n4)*n1*n2*n3*n4^2;
L F = gcd_(F1,F2,F3);
P F;
.end
assert succeeded?
assert result("F") =~ expr("n1*n2*n3")
*--#] Issue42_3 :
*--#[ Issue42_4 :
#procedure PrintFactorizedDollar(name,dollar)
  #write " `name' = (%$)%", `dollar'[1]
  #do i=2,``dollar'[0]'
    #write "*(%$)%", `dollar'[`i']
  #enddo
  #write ";"
#endprocedure

S x,y;
#$a = (1-x)*(1+y);
#$b = (1-x)*(1-y);
#factdollar $a
#factdollar $b
#call PrintFactorizedDollar(F1,$a)
#call PrintFactorizedDollar(F2,$b)
.end
assert succeeded?
assert result("F1") =~ expr("(-1)*(-1+x)*(1+y)")
assert result("F2") =~ expr("(-1+y)*(-1+x)")
*--#] Issue42_4 :
*--#[ Issue45 :
* FactDollar still broken
#procedure PrintFactorizedDollar(name,dollar)
  #write " `name' = (%$)%", `dollar'[1]
  #do i=2,``dollar'[0]'
    #write "*(%$)%", `dollar'[`i']
  #enddo
  #write ";"
#endprocedure

S x,y;
#$a = 1+x-y;  * <-- The bug was found for this.
#$b = 2*(1+x-y);
#$c = (1+x+y)*(1+x-y);
#factdollar $a
#factdollar $b
#factdollar $c
#call PrintFactorizedDollar(F1,$a)
#call PrintFactorizedDollar(F2,$b)
#call PrintFactorizedDollar(F3,$c)
.end
assert succeeded?
assert result("F1") =~ expr("(-1)*(-1+y-x)")
assert result("F2") =~ expr("(-1+y-x)*(-2)")
assert result("F3") =~ expr("(-1)*(-1+y-x)*(1+y+x)")
*--#] Issue45 :
*--#[ Issue48 :
* Memory error on dollar matching
CFunction TOPO,topo;
CFunction color;
Symbol M1,M2,x,cOlNA,cOlNR,ca,cf,nf,[dabc^2/n],[d4RR/n],[d4RA/n],[d4AA/n];

L   Diagrams=
      +topo(M1)*color(24*[d4RR/n]*cOlNA*cOlNR^-1+12*ca*[dabc^2/n]+
      ca^2*cf*nf)
      +topo(M2)*color(24*[d4RA/n]*cOlNA*cOlNR^-1+24*cf^4-72*ca*cf^3
      +66*ca^2*cf^2-19*ca^3*cf)
;

.sort

   id  topo(x?$topo) = 1;
   id  color(x?$color) = 1;

   $color = $color * topo($topo);

.sort
L Color = `$color';
P;
.end
assert succeeded?
assert result("Diagrams") =~ expr("2")
assert result("Color") =~ expr("
      24*topo(M2)*cf^4 - 72*topo(M2)*ca*cf^3 + 66*topo(M2)*ca^2*cf^2 - 19*
      topo(M2)*ca^3*cf + 24*topo(M2)*cOlNA*cOlNR^-1*[d4RA/n]")
*--#] Issue48 :
*--#[ Issue52 :
* CopySpectator crashes when empty
CreateSpectator TMP, "xTMP";
S x;
L F = (1+x)^2;
.sort
CopySpectator G = TMP;
P;
.end
assert succeeded?
assert result("F") =~ expr("1 + 2*x + x^2")
assert result("G") =~ expr("0")
*--#] Issue52 :
*--#[ Issue54_1 :
* Transform,replace xarg_ acts only on symbols
CF f;
S a;
L xx = f(a,1);
Transform,f,replace(1,last)=(xarg_,2*xarg_);
P;
.end
assert succeeded?
assert result("xx") =~ expr("f(2*a,2)")
*--#] Issue54_1 :
*--#[ Issue54_2 :
CF f;
S a;
L xx = f(a,a^2,1,2);
Transform,f,replace(1,last)=(xarg_,2*xarg_,1,3);
Print;
.end
assert succeeded?
assert result("xx") =~ expr("f(2*a,2*a^2,3,4)")
*--#] Issue54_2 :
*--#[ Issue56 :
* PolyRatFun(expand) does not expand substituted expressions
CF rat;
S x;
PolyRatFun rat;
L F = rat(1,1+x);
L G = rat(1-x,1);
.sort
PolyRatFun rat(expand,x,2);
Drop;
L H = F - G;
*.sort;  * <-- (1)
P;
.end
assert succeeded?
assert result("H") =~ expr("rat(x^2)")
*--#] Issue56 :
*--#[ Issue59_1 :
* Crash when PolyRatFun(expand)
CF num,rat;
S x;
PolyRatFun rat(expand,x,2);
L F = <num(1+5*x)>*...*<num(28+5*x)>
    * <num(-1-3*x)>*...*<num(-27-3*x)>
;
id num(x?) = rat(x,1);
.sort
P +s;
.end
assert succeeded?
assert result("F") =~ expr('
       + rat( - 3319889381431113865517677688157339126513795072000000000000 -
      103946485016901161789833595241629175725192946647040000000000*x -
      1536456092437457859275118833518144965878613654110208000000000*x^2 -
      14341583603546206146592561106613688715865653438840832000000000*x^3 -
      95350953145199682193819868990746361462039779703626137600000000*x^4 -
      482678292136824798885463691784578840084236747807848923136000000*x^5 -
      1941271491836133285753020314760605215670516226955236553523200000*x^6 -
      6389627158259083471170953548727799642289261024489896306278400000*x^7 -
      17591468126856215796050075638545442062829816133444851885670400000*x^8 -
      41194174917859923547204007607646816358441564917023608340480000000*x^9 -
      83142707771952411368333612510671694808221049482931577720012800000*x^10
       - 146189743385000094759662728927310397266671048442685365774745600000*
      x^11 - 225914355315297389747673295957553352354528636427667529860505600000
      *x^12 - 3091037806297529378389931600752826877312904609081984744634880000\
      00*x^13 - 37679152861559399117197094509000943874528225165158036952652800\
      0000*x^14 - 411374684408740817965387456003935499652225422248520998636096\
      000000*x^15 - 4041007422631857548573885294091458663428613738832336181580\
      16000000*x^16 - 35855920819677302805348446208014864092137349571922858637\
      3200000000*x^17 - 288352913735158664565809092348685943833351418453612359\
      879856000000*x^18 - 2107927158173465772550417351182076125222801277065424\
      94543892000000*x^19 - 14042958035564416651358321447177170293597901794349\
      0054167972000000*x^20 - 854449258116287543253102949209754131898065021340\
      04689460835000000*x^21 - 47572610512476214931991748786252819124998987079\
      784873737853000000*x^22 - 2427546694347793190794349868768034701756003181\
      3444531496034750000*x^23 - 113685201265931992456643472584846375900339086\
      32649307026307250000*x^24 - 48915782696080656790995261387065463940617994\
      72196805484382437500*x^25 - 19354826855943273338341818452477962195821952\
      44648890567353612500*x^26 - 70472461262493343421312083609217623811278921\
      5290359659582646875*x^27 - 236235684477189316681483831172718647920026929\
      364958626576975000*x^28 - 7292673651486305568198746786757408091943376722\
      6310677662031250*x^29 - 207336811000917604969817275362276202346071075778\
      79885969637500*x^30 - 54282602715536089219779634243153071695357786692607\
      52234665625*x^31 - 13082684231750192663414950505685647455277009955921124\
      29900000*x^32 - 29010148882593006986816365253390381619405950585963125012\
      5000*x^33 - 59140841625239632745885534911564822145135419401640630312500*
      x^34 - 11073191068280627963508138102589913966903352832430532421875*x^35
       - 1901761146968455062021248419757443631867452462060078125000*x^36 -
      299131752534116649980990394847134244303517804085058593750*x^37 -
      43010912318196128502084085326970588653892891467773437500*x^38 -
      5640697433841611969665638949879587676158673385009765625*x^39 -
      672933211253820785388826485591817633783724707031250000*x^40 -
      72800015113733764117903303419578347207526733398437500*x^41 -
      7115344498230291861148466855852808949974975585937500*x^42 - 625529893548\
      940236690796283562961223709869384765625*x^43 - 4920403377088713293968050\
      5777917876373291015625000*x^44 - 344115807576898928188147719761055095672\
      6074218750*x^45 - 212334582622726931690956206260841751098632812500*x^46
       - 11450853274091996328496158674029827117919921875*x^47 - 53333960950506\
      8790966535040588378906250000000*x^48 - 211306129335403556870899978637695\
      31250000000*x^49 - 697960935386657109675828695297241210937500*x^50 -
      18695662408796261855413019657135009765625*x^51 - 39004843940394245476484\
      2987060546875000*x^52 - 5944748720274431768059730529785156250*x^53 -
      58860473293412715196609497070312500*x^54 -
      284075643307976424694061279296875*x^55)
')
*--#] Issue59_1 :
*--#[ Issue59_2 :
CF rat;
S x;
PolyRatFun rat(expand,x,2);
L F1 = rat(1+x,1)^270;
L F2 = rat(10+10*x,1)^47;
P;
.end
assert succeeded?
assert result("F1") =~ expr('
      rat(1 + 270*x + 36315*x^2 + 3244140*x^3 + 216546345*x^4 + 11520265554*
      x^5 + 508811728635*x^6 + 19189470908520*x^7 + 630853856117595*x^8 +
      18364856700312210*x^9 + 479322759878148681*x^10 + 11329447051665332460*
      x^11 + 244527232198443425595*x^12 + 4852925069784492600270*x^13 +
      89085838781043899876385*x^14 + 1520398315196482557890304*x^15 +
      24231348148443940766376720*x^16 + 362044848806162409097628640*x^17 +
      5088741485997727194538891440*x^18 + 67492781814285644895989507520*x^19
       + 847034411769284843444668319376*x^20 +
      10083742997253390993388908564000*x^21 +
      114129636650731561697901737838000*x^22 +
      1230615212581801187003462216688000*x^23 +
      12665081562821037216243965313414000*x^24 + 12462440257815900620784061868\
      3993760*x^25 + 1174345331986498327727728906829941200*x^26 + 106126022594\
      33540443169105676537246400*x^27 + 92102226751512511703217595692805388400
      *x^28 + 768577202547104408006160626126169103200*x^29 + 61742368604617387\
      44316157029880225129040*x^30 + 47800543435832816085028312489395291321600
      *x^31 + 357010308786376345135055208905171082058200*x^32 + 25748016209441\
      68792186155749073658106965200*x^33 + 17947881887169647169062320956778146\
      216198600*x^34 + 121020003582058192339963078451418357343510560*x^35 +
      789991690049546533330314539891203165992360600*x^36 + 4996163661394429427\
      007935198230852455194929200*x^37 + 3063437192381321201296970792599443742\
      2642592200*x^38 + 182235238110888850948948006123864345693668753600*x^39
       + 1052408500090383114230174735365316596380937052040*x^40 + 590375500050\
      7027226169272905707873589454037121200*x^41 + 321895213122883151141134165\
      57311977428213678589400*x^42 + 17067932230701711269808974360621234543331\
      9039962400*x^43 + 880550140083929195056053904513868236667350501624200*
      x^44 + 4422318481310399957392626276002982699707138074823760*x^45 +
      21630905615105217182898715480449371900741436235551000*x^46 +
      103091975697522737212113026970652325654597483335392000*x^47 +
      478948137094741049964608437801155596270317474662342000*x^48 +
      2169928294592500267186593330446051885143071007653876000*x^49 +
      9591083062098851180964742520571549332332373853830131920*x^50 +
      41373299483563671761024379500504722610061220545933902400*x^51 +
      174245242055777771455083444434817966376988601914606242800*x^52 +
      716706844682255739192607375222458805097802173912908696800*x^53 +
      2880099727704620285273996304134695568633760587761133096400*x^54 +
      11310937112439963302166967303510804414998041581025540887680*x^55 +
      43425919270974859106533892325978981236153195355723058765200*x^56 +
      163037661824361751733302683469464947097136558002188325890400*x^57 +
      598741758079121605503335716879241960891208394042519196804400*x^58 +
      2151411062928369158757748677599988062863325076898543554619200*x^59 +
      7565795571298098208298082849559958021069359853759878167077520*x^60 +
      26046181474960665962993399973894937449583042119501219919447200*x^61 +
      87800837552689986875251945073290998821981545209286370373620400*x^62 +
      289882130332690750318292136114992504047177165135421667265286400*x^63 +
      937587515294796645560726127746928880277588643484879455061160700*x^64 +
      2971431202318893984392455112551805374418204008582848734501524680*x^65 +
      9229445401142019193946262092016971238723209420598242281406250900*x^66 +
      28101594952730924112911006966738240786560219728388677991147390800*x^67
       + 83891526108887905807660800209527395289290067718572082826513534300*
      x^68 + 245595482231816767726775096265572954325168024335529865666025129400
      *x^69 + 7052098846942167187583113478482880545622681841634500428410150144\
      20*x^70 + 19865067174484977993191868953472902945416005187702818108197606\
      04000*x^71 + 54904838440590425286738637801959828974135903227123066715712\
      82780500*x^72 + 14891997275666992064074315458613761831340971012288174259\
      878273843000*x^73 + 3964491166630266806246811007225555514559690931649689\
      6340486756041500*x^74 + 103605369154604305869916660988827850780493256347\
      111889103138722455120*x^75 + 2658295655940505216399177485897556697657392\
      76153773925988316458930900*x^76 + 66975241201617923633953302891444934979\
      9395059400417423918615493929800*x^77 + 165720789127080246940422916128831\
      6980913887775183084138670420388826300*x^78 + 402764449524043131804572150\
      5915909624499575352343698159806591324742400*x^79 + 961600123238652977183\
      4160095374234228492736153720579356538236787822480*x^80 +
      22556052273499267366030745902729685227328640360579136762250185057855200*
      x^81 + 51988949752333677221705011897755006194696500343286059122747377755\
      300400*x^82 + 1177581030534786905744643642985294116217221935486479411455\
      00084554174400*x^83 + 26215196751191089449315281099791666634835774039996\
      6249931053759662269200*x^84 + 573650187731946192655604974654264705185818\
      114286984970437364697613906720*x^85 + 1234014938725698205131243259430685\
      703016004083059211855010610105332241200*x^86 + 2609870675006074364875273\
      100405128383390169554975804383010945510127958400*x^87 +
      5427344699160359190592897470160664706368193506370138660125034413107004400
      *x^88 + 1109861500277736373806637460190158400628102492313893523755905913\
      6915447200*x^89 + 223205479500300315176668200327131856126318390120905253\
      11090996708685510480*x^90 + 44150534406652809595384918746026081431579461\
      782157083032927246236960350400*x^91 + 8590158324772666214754239625585509\
      3220138300641370846335804098656694594800*x^92 + 164413782990272536153360\
      715414432328958974381872731297287883113557974600800*x^93 +
      309587655205087647863243049237814066231260272249717442765482032976186216\
      400*x^94 + 5735518664852150107782187017458450069126506096415817887023667\
      13724302885120*x^95 + 10455372566136731967311278417241966271845193404924\
      66802322022655226593801000*x^96 + 18754998211420529508372808707217547745\
      37179023151435294886927237210590942000*x^97 + 33108313169140322499474448\
      02396567101989101744951003122606514408545226867000*x^98 +
      575215137888094491910061117184050041961742929425830845543758058858362647\
      6000*x^99 + 983617885788641581166204510384725571754580409318170745879826\
      2806478001273960*x^100 + 16555944612284066217648986808455776950324620750\
      899903643521828486151091253200*x^101 + 274309278380000704978693997120492\
      77496126087322569448193678323668230729625400*x^102 + 4474170754159234799\
      6524846132274549702419249225161818412989887148182160942400*x^103 +
      718448573023646357251889356162485557721539867365579199516279918629463545\
      90200*x^104 + 1135832982113574240988701267837834310302624933168439496378\
      11872849991379637840*x^105 + 1768041906120186318520148199936251520754085\
      98087540110285273198304231864530600*x^106 + 2709896005642154731189759857\
      84621728414644954078098860624157051606486222271200*x^107 +
      408993563814510389985121163730493904922103032543797354460533327887567168\
      798200*x^108 + 607861993926153056675134206645321216489731112588029095620\
      242193741154874727600*x^109 + 889688918382824019315423702453606507771333\
      719333388039953263574475690316646760*x^110 + 128243447694821480261682695\
      8491685056246967523363442219752451999244238294265600*x^111 +
      182059894495326922871495970000158860663631996620345815125571310606994543\
      5609200*x^112 + 25456162239169605144864038283208053083941465014172246716\
      67280272203994502887200*x^113 + 3505804799604936848897942114441810819455\
      096497565826960103184234526553832923600*x^114 + 475570042381191433415720\
      8433503673807260826553219730485009536874662107808139840*x^115 +
      635459970423143725684799402752646069073644927369877780324550185838471301\
      9497200*x^116 + 83641739696721481842272741900775636442172067363214682196\
      56472531549109444466400*x^117 + 1084507302847320908632858433120226472512\
      9090090315124047520680485822150381384400*x^118 + 13852530254856535975814\
      662339014657464030434401074780295992801965083755108995200*x^119 +
      174311005706944744362334501099267773089049632880190985391242758060637251\
      78818960*x^120 + 2160880236036505095400840922718195534161772308432119653\
      6104474139748419643164000*x^121 + 26391078292576988460223385039755011031\
      975743766916871179340710219856676449438000*x^122 + 317551185959462950578\
      29764112875948233596829898404040118231098475925106622088000*x^123 +
      376451809161621401088788332628448741156349515731080153014513828706531505\
      92314000*x^124 + 4396957131007737964717047725100281296706162343739016187\
      2095215192922879891822752*x^125 + 50599903491755714673331104772979427620\
      824884114456932313125446055347758605669040*x^126 + 573731189197860071886\
      58890451252264388966797736077151599134364031260450702490880*x^127 +
      640965312931984299060798541760083891220488443457736928021579223161737847\
      69189030*x^128 + 7055587165607889183459952940304799422737159610154933626\
      2840503634857964629649940*x^129 + 76525983873131721143681028044844362969\
      687654233218895485080853942422869329081858*x^130 + 817834942155606180161\
      47663559375655082108943455348437922987172152207646611232520*x^131 +
      861204976966888326079130699602516367910086601537381278128425524936125975\
      67888790*x^132 + 8935811039205307443527822296627613441473079023470572660\
      2799039429462695220816940*x^133 + 91358665102322919385321765271491271752\
      374016881751377198384092551017830188447170*x^134 + 920353959549327187881\
      76000569798614506095305895690276288742493236580925226880112*x^135 +
      913586651023229193853217652714912717523740168817513771983840925510178301\
      88447170*x^136 + 8935811039205307443527822296627613441473079023470572660\
      2799039429462695220816940*x^137 + 86120497696688832607913069960251636791\
      008660153738127812842552493612597567888790*x^138 + 817834942155606180161\
      47663559375655082108943455348437922987172152207646611232520*x^139 +
      765259838731317211436810280448443629696876542332188954850808539424228693\
      29081858*x^140 + 7055587165607889183459952940304799422737159610154933626\
      2840503634857964629649940*x^141 + 64096531293198429906079854176008389122\
      048844345773692802157922316173784769189030*x^142 + 573731189197860071886\
      58890451252264388966797736077151599134364031260450702490880*x^143 +
      505999034917557146733311047729794276208248841144569323131254460553477586\
      05669040*x^144 + 4396957131007737964717047725100281296706162343739016187\
      2095215192922879891822752*x^145 + 37645180916162140108878833262844874115\
      634951573108015301451382870653150592314000*x^146 + 317551185959462950578\
      29764112875948233596829898404040118231098475925106622088000*x^147 +
      263910782925769884602233850397550110319757437669168711793407102198566764\
      49438000*x^148 + 2160880236036505095400840922718195534161772308432119653\
      6104474139748419643164000*x^149 + 17431100570694474436233450109926777308\
      904963288019098539124275806063725178818960*x^150 + 138525302548565359758\
      14662339014657464030434401074780295992801965083755108995200*x^151 +
      108450730284732090863285843312022647251290900903151240475206804858221503\
      81384400*x^152 + 8364173969672148184227274190077563644217206736321468219\
      656472531549109444466400*x^153 + 635459970423143725684799402752646069073\
      6449273698777803245501858384713019497200*x^154 + 47557004238119143341572\
      08433503673807260826553219730485009536874662107808139840*x^155 +
      350580479960493684889794211444181081945509649756582696010318423452655383\
      2923600*x^156 + 25456162239169605144864038283208053083941465014172246716\
      67280272203994502887200*x^157 + 1820598944953269228714959700001588606636\
      319966203458151255713106069945435609200*x^158 + 128243447694821480261682\
      6958491685056246967523363442219752451999244238294265600*x^159 +
      889688918382824019315423702453606507771333719333388039953263574475690316\
      646760*x^160 + 607861993926153056675134206645321216489731112588029095620\
      242193741154874727600*x^161 + 408993563814510389985121163730493904922103\
      032543797354460533327887567168798200*x^162 + 270989600564215473118975985\
      784621728414644954078098860624157051606486222271200*x^163 +
      176804190612018631852014819993625152075408598087540110285273198304231864\
      530600*x^164 + 113583298211357424098870126783783431030262493316843949637\
      811872849991379637840*x^165 + 718448573023646357251889356162485557721539\
      86736557919951627991862946354590200*x^166 + 4474170754159234799652484613\
      2274549702419249225161818412989887148182160942400*x^167 +
      274309278380000704978693997120492774961260873225694481936783236682307296\
      25400*x^168 + 1655594461228406621764898680845577695032462075089990364352\
      1828486151091253200*x^169 + 98361788578864158116620451038472557175458040\
      93181707458798262806478001273960*x^170 + 5752151378880944919100611171840\
      500419617429294258308455437580588583626476000*x^171 + 331083131691403224\
      9947444802396567101989101744951003122606514408545226867000*x^172 +
      187549982114205295083728087072175477453717902315143529488692723721059094\
      2000*x^173 + 10455372566136731967311278417241966271845193404924668023220\
      22655226593801000*x^174 + 5735518664852150107782187017458450069126506096\
      41581788702366713724302885120*x^175 + 3095876552050876478632430492378140\
      66231260272249717442765482032976186216400*x^176 + 1644137829902725361533\
      60715414432328958974381872731297287883113557974600800*x^177 +
      859015832477266621475423962558550932201383006413708463358040986566945948\
      00*x^178 + 4415053440665280959538491874602608143157946178215708303292724\
      6236960350400*x^179 + 22320547950030031517666820032713185612631839012090\
      525311090996708685510480*x^180 + 110986150027773637380663746019015840062\
      81024923138935237559059136915447200*x^181 + 5427344699160359190592897470\
      160664706368193506370138660125034413107004400*x^182 + 260987067500607436\
      4875273100405128383390169554975804383010945510127958400*x^183 +
      1234014938725698205131243259430685703016004083059211855010610105332241200
      *x^184 + 573650187731946192655604974654264705185818114286984970437364697\
      613906720*x^185 + 262151967511910894493152810997916666348357740399966249\
      931053759662269200*x^186 + 117758103053478690574464364298529411621722193\
      548647941145500084554174400*x^187 + 519889497523336772217050118977550061\
      94696500343286059122747377755300400*x^188 + 2255605227349926736603074590\
      2729685227328640360579136762250185057855200*x^189 + 96160012323865297718\
      34160095374234228492736153720579356538236787822480*x^190 +
      4027644495240431318045721505915909624499575352343698159806591324742400*
      x^191 + 1657207891270802469404229161288316980913887775183084138670420388\
      826300*x^192 + 669752412016179236339533028914449349799395059400417423918\
      615493929800*x^193 + 265829565594050521639917748589755669765739276153773\
      925988316458930900*x^194 + 103605369154604305869916660988827850780493256\
      347111889103138722455120*x^195 + 396449116663026680624681100722555551455\
      96909316496896340486756041500*x^196 + 1489199727566699206407431545861376\
      1831340971012288174259878273843000*x^197 + 54904838440590425286738637801\
      95982897413590322712306671571282780500*x^198 + 1986506717448497799319186\
      895347290294541600518770281810819760604000*x^199 + 705209884694216718758\
      311347848288054562268184163450042841015014420*x^200 + 245595482231816767\
      726775096265572954325168024335529865666025129400*x^201 + 838915261088879\
      05807660800209527395289290067718572082826513534300*x^202 +
      28101594952730924112911006966738240786560219728388677991147390800*x^203
       + 9229445401142019193946262092016971238723209420598242281406250900*
      x^204 + 2971431202318893984392455112551805374418204008582848734501524680
      *x^205 + 937587515294796645560726127746928880277588643484879455061160700
      *x^206 + 289882130332690750318292136114992504047177165135421667265286400
      *x^207 + 87800837552689986875251945073290998821981545209286370373620400*
      x^208 + 26046181474960665962993399973894937449583042119501219919447200*
      x^209 + 7565795571298098208298082849559958021069359853759878167077520*
      x^210 + 2151411062928369158757748677599988062863325076898543554619200*
      x^211 + 598741758079121605503335716879241960891208394042519196804400*
      x^212 + 163037661824361751733302683469464947097136558002188325890400*
      x^213 + 43425919270974859106533892325978981236153195355723058765200*
      x^214 + 11310937112439963302166967303510804414998041581025540887680*
      x^215 + 2880099727704620285273996304134695568633760587761133096400*x^216
       + 716706844682255739192607375222458805097802173912908696800*x^217 +
      174245242055777771455083444434817966376988601914606242800*x^218 +
      41373299483563671761024379500504722610061220545933902400*x^219 +
      9591083062098851180964742520571549332332373853830131920*x^220 +
      2169928294592500267186593330446051885143071007653876000*x^221 +
      478948137094741049964608437801155596270317474662342000*x^222 +
      103091975697522737212113026970652325654597483335392000*x^223 +
      21630905615105217182898715480449371900741436235551000*x^224 +
      4422318481310399957392626276002982699707138074823760*x^225 + 88055014008\
      3929195056053904513868236667350501624200*x^226 + 17067932230701711269808\
      9743606212345433319039962400*x^227 + 32189521312288315114113416557311977\
      428213678589400*x^228 + 5903755000507027226169272905707873589454037121200
      *x^229 + 1052408500090383114230174735365316596380937052040*x^230 +
      182235238110888850948948006123864345693668753600*x^231 + 306343719238132\
      12012969707925994437422642592200*x^232 + 4996163661394429427007935198230\
      852455194929200*x^233 + 789991690049546533330314539891203165992360600*
      x^234 + 121020003582058192339963078451418357343510560*x^235 + 1794788188\
      7169647169062320956778146216198600*x^236 + 25748016209441687921861557490\
      73658106965200*x^237 + 357010308786376345135055208905171082058200*x^238
       + 47800543435832816085028312489395291321600*x^239 + 6174236860461738744\
      316157029880225129040*x^240 + 768577202547104408006160626126169103200*
      x^241 + 92102226751512511703217595692805388400*x^242 + 10612602259433540\
      443169105676537246400*x^243 + 1174345331986498327727728906829941200*
      x^244 + 124624402578159006207840618683993760*x^245 +
      12665081562821037216243965313414000*x^246 +
      1230615212581801187003462216688000*x^247 +
      114129636650731561697901737838000*x^248 +
      10083742997253390993388908564000*x^249 + 847034411769284843444668319376*
      x^250 + 67492781814285644895989507520*x^251 +
      5088741485997727194538891440*x^252 + 362044848806162409097628640*x^253
       + 24231348148443940766376720*x^254 + 1520398315196482557890304*x^255 +
      89085838781043899876385*x^256 + 4852925069784492600270*x^257 +
      244527232198443425595*x^258 + 11329447051665332460*x^259 +
      479322759878148681*x^260 + 18364856700312210*x^261 + 630853856117595*
      x^262 + 19189470908520*x^263 + 508811728635*x^264 + 11520265554*x^265 +
      216546345*x^266 + 3244140*x^267 + 36315*x^268 + 270*x^269 + x^270)
')
assert result("F2") =~ expr('
      rat(100000000000000000000000000000000000000000000000 + 47000000000000000\
      00000000000000000000000000000000*x + 10810000000000000000000000000000000\
      0000000000000000*x^2 + 1621500000000000000000000000000000000000000000000\
      000*x^3 + 17836500000000000000000000000000000000000000000000000*x^4 +
      153393900000000000000000000000000000000000000000000000*x^5 +
      1073757300000000000000000000000000000000000000000000000*x^6 +
      6289149900000000000000000000000000000000000000000000000*x^7 +
      31445749500000000000000000000000000000000000000000000000*x^8 +
      136264914500000000000000000000000000000000000000000000000*x^9 +
      517806675100000000000000000000000000000000000000000000000*x^10 +
      1741713361700000000000000000000000000000000000000000000000*x^11 +
      5225140085100000000000000000000000000000000000000000000000*x^12 +
      14067684844500000000000000000000000000000000000000000000000*x^13 +
      34164377479500000000000000000000000000000000000000000000000*x^14 +
      75161630454900000000000000000000000000000000000000000000000*x^15 +
      150323260909800000000000000000000000000000000000000000000000*x^16 +
      274118887541400000000000000000000000000000000000000000000000*x^17 +
      456864812569000000000000000000000000000000000000000000000000*x^18 +
      697319977079000000000000000000000000000000000000000000000000*x^19 +
      976247967910600000000000000000000000000000000000000000000000*x^20 +
      1255175958742200000000000000000000000000000000000000000000000*x^21 +
      1483389769422600000000000000000000000000000000000000000000000*x^22 +
      1612380184155000000000000000000000000000000000000000000000000*x^23 +
      1612380184155000000000000000000000000000000000000000000000000*x^24 +
      1483389769422600000000000000000000000000000000000000000000000*x^25 +
      1255175958742200000000000000000000000000000000000000000000000*x^26 +
      976247967910600000000000000000000000000000000000000000000000*x^27 +
      697319977079000000000000000000000000000000000000000000000000*x^28 +
      456864812569000000000000000000000000000000000000000000000000*x^29 +
      274118887541400000000000000000000000000000000000000000000000*x^30 +
      150323260909800000000000000000000000000000000000000000000000*x^31 +
      75161630454900000000000000000000000000000000000000000000000*x^32 +
      34164377479500000000000000000000000000000000000000000000000*x^33 +
      14067684844500000000000000000000000000000000000000000000000*x^34 +
      5225140085100000000000000000000000000000000000000000000000*x^35 +
      1741713361700000000000000000000000000000000000000000000000*x^36 +
      517806675100000000000000000000000000000000000000000000000*x^37 +
      136264914500000000000000000000000000000000000000000000000*x^38 +
      31445749500000000000000000000000000000000000000000000000*x^39 +
      6289149900000000000000000000000000000000000000000000000*x^40 +
      1073757300000000000000000000000000000000000000000000000*x^41 +
      153393900000000000000000000000000000000000000000000000*x^42 +
      17836500000000000000000000000000000000000000000000000*x^43 +
      1621500000000000000000000000000000000000000000000000*x^44 + 108100000000\
      000000000000000000000000000000000000000*x^45 + 4700000000000000000000000\
      000000000000000000000000*x^46 + 1000000000000000000000000000000000000000\
      00000000*x^47)
')
*--#] Issue59_2 :
*--#[ Issue60 :
* No error for skipped semicolon in Save statement
Symbol x;
Global test = x;
.store
Save test.sav
.end
assert compile_error?
*--#] Issue60 :
*--#[ Issue61 :
* IntoHide + Bracket for expressions with bracket index
S x,y;
L F = 1+x;
B+ y;
.sort
IntoHide F;
B x;
.sort
L G = F[x];
P;
.end
assert succeeded?
assert result("G") =~ expr("1")
*--#] Issue61 :
*--#[ Issue69 :
* No warnings/errors for the same labels
On allwarning;
L F = 1;
goto 1;
label 1;
  multiply 2;
label 1;
  multiply 3;
label 1;
  multiply 5;
P;
.end
assert compile_error?
*--#] Issue69 :
*--#[ Issue73 :
* "PolyRatFun cannot have zero arguments" when used in function
S ep;
CF rat,K;
PolyRatfun rat;
L F =  K(rat(ep+1,1)) + K(rat(1,1));
P;
.end
assert succeeded?
assert result("F") =~ expr("K(rat(1 + ep,1))*rat(1,1) + K(rat(1,1))*rat(1,1)")
*--#] Issue73 :
*--#[ Issue78_1 :
* Minus sign is ignored in set restriction
V p,p1;
CF vx;
L F1 = vx(-p1);
L F2 = F1;
inexpression F1;
  id vx(p?!{p1,-p1}) = 1;
endinexpression;
inexpression F2;
  id vx(p?!{-p1,p1}) = 1;
endinexpression;
Print;
.end
assert succeeded?
assert result("F1") =~ expr("vx(-p1)")
assert result("F2") =~ expr("vx(-p1)")
*--#] Issue78_1 :
*--#[ Issue78_2 :
V Q;
CF vx;
L F1 = vx(-Q);
L F2 = F1;
inexpression F1;
  id vx(Q?{Q,-Q}) = 1;
endinexpression;
inexpression F2;
  id vx(Q?{-Q,Q}) = 1;
endinexpression;
Print;
.end
assert succeeded?
assert result("F1") =~ expr("1")
assert result("F2") =~ expr("1")
*--#] Issue78_2 :
*--#[ Issue82 :
* Minus sign matching bug in latest version
V p1,p2;
CF vx;
L F = vx(-p2);
id vx(p2?!{p1}) = 1;
Print;
.end
assert succeeded?
assert result("F") =~ expr("1")
*--#] Issue82 :
*--#[ Issue88 :
* Strange error in 'also once' in combination with 'replace_'
cf ABB;
i mu;
L test = 1;
once ABB(mu?) * ABB(mu?) = 1;
also once ABB(mu?, ?b, mu?) = replace_(mu, N100_?);
P;
.end
assert succeeded?
assert result("test") =~ expr("1")
*--#] Issue88 :
*--#[ Issue90_1 :
* Errors in symbol powers
CFunction SP;
Symbol nn, shat;
Vector k1,k2,k3;
Local testExpr0 = shat^(-1+nn);
Local testExpr1 = shat^(-3+nn);
Local testExpr4 = SP(k2,k3)*(shat)^(-3+nn);
Argument;
    Identify nn = 2;
EndArgument;
Print +s;
.end
assert succeeded?
assert result("testExpr0") =~ expr("+shat")
assert result("testExpr1") =~ expr("+shat^-1")
assert result("testExpr4") =~ expr("+SP(k2,k3)*shat^-1")
*--#] Issue90_1 :
*--#[ Issue90_2:
Symbol i,x,y,n;

Local test1 = 5^(n) * sum_(i,1,n, x^i);
Multiply replace_(n,3);
Print +s test1;
.sort

Local test2 = 5^(-n);
Multiply replace_(n,3);
Print +s test2;
.sort

Local test3 = 5^(-n) * sum_(i,1,n, x^i);
Multiply replace_(n,3);
Print +s test3;
.end
assert succeeded?
assert result("test1") =~ expr("+ 125*x + 125*x^2 + 125*x^3")
assert result("test2") =~ expr("+ 1/125")
assert result("test3") =~ expr("+ 1/125*x + 1/125*x^2 + 1/125*x^3")
*--#] Issue90_2 :
*--#[ Issue94 :
* No check for Dirac gamma matrices without any arguments
CF f;
L F1 = 123*g5_;
L F2 = 123*g6_;
L F3 = 123*g7_;
L F4 = 123*g_;
L F5 = 123*gi_;
L F6 = f(1000*g5_);
L F7 = f(10000*g5_);
.end
# Runtime errors may freeze ParFORM.
#require not mpi?
assert runtime_error?
*--#] Issue94 :
*--#[ Issue104 :
* Leading zeroes in rational numbers not handled consistently
Local test1 = 0001;
Local test2 = 00001;
Local test3 = 00010;
Local test4 = 00011;
Print +s;
.end
assert succeeded?
assert result("test1") =~ expr("+ 1")
assert result("test2") =~ expr("+ 1")
assert result("test3") =~ expr("+ 10")
assert result("test4") =~ expr("+ 11")
*--#] Issue104 :
*--#[ Issue105 :
* Crash by replace_(x,0)
S x;
V p;
CF f;

L F = f(p.p+x);
L G = f(p.p*x);

multiply replace_(x,0);
P;
.end
assert succeeded?
assert result("F") =~ expr("f(p.p)")
assert result("G") =~ expr("f(0)")
*--#] Issue105 :
*--#[ Issue106 :
* Crash with replace_ and nested functions
cfunction prop, mom;
vector q1, q2, k1, k2, p;

l test =  prop(mom(-q1-q2+p));
multiply replace_(q1,k1-k2);
print+s;
.sort
multiply replace_(q2,k2);
print+s;
.end

CF f,g;
V p1,p2;
L F1 = f(f(p1-p2));
L F2 = f(f(f(p1-p2)));
L F3 = f(f(f(f(p1-p2)+g(p1-p2))+g(p1-p2)));
multiply replace_(p1,p2);
P;
.end
assert succeeded?
assert result("test") =~ expr("+ prop(mom(- k1 + p))")
assert result("F1") =~ expr("f(f(0))")
assert result("F2") =~ expr("f(f(f(0)))")
assert result("F3") =~ expr("f(f(f(f(0)+g(0))+g(0)))")
*--#] Issue106 :
*--#[ Issue111 :
* PolyRatFun(expand) doesn't expand numeric coefficients in one go
S x;
CF rat;
PolyRatFun rat(expand,x,3);
L F = rat(1+x);
.sort
multiply 2;
*.sort; * <-- workaround
P;
.sort
Drop;
L F1 = 3/5;
L F2 = 6/5;
L F3 = 2/5;
L F4 = 12345678901234567890123456789012345678901234567890;
L F5 = 2/5 * rat(1+x);
L F6 = 2/5 * rat(1,1-x);
L F7 = 2/5 * rat(1+x) * rat(1-2*x);
L F8 = 2/5 * rat(1+x) * rat(1,1-x);
L F9 = 2/5 * rat(1,1+x) * rat(1,1-2*x);
multiply 5/3;
P;
.end
assert succeeded?
assert result("F") =~ expr("rat(2 + 2*x)")
assert result("F1") =~ expr("rat(1)")
assert result("F2") =~ expr("rat(2)")
assert result("F3") =~ expr("rat(2/3)")
assert result("F4") =~ expr("rat(20576131502057613150205761315020576131502057613150)")
assert result("F5") =~ expr("rat(2/3 + 2/3*x)")
assert result("F6") =~ expr("rat(2/3 + 2/3*x + 2/3*x^2 + 2/3*x^3)")
assert result("F7") =~ expr("rat(2/3 - 2/3*x - 4/3*x^2)")
assert result("F8") =~ expr("rat(2/3 + 4/3*x + 4/3*x^2 + 4/3*x^3)")
assert result("F9") =~ expr("rat(2/3 + 2/3*x + 2*x^2 + 10/3*x^3)")
*--#] Issue111 :
*--#[ Issue113 :
* ?a crashes the program if used only on the rhs
CF f;
L F = f;
id f(?a) = f(?a);
id f = f(?a);
Print;
.end
assert compile_error?
*--#] Issue113 :
*--#[ Issue114 :
* Crash on PolyRatFun(expand) when the result is zero
CF rat;
S x;
L F = rat(x^10,1-x);
P;
.sort
PolyRatFun rat(expand,x,5);
P;
.end
assert result("F") =~ expr("rat(x^10 + x^11 + x^12 + x^13 + x^14 + x^15)")
*--#] Issue114 :
